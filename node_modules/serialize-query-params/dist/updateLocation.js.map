{
  "version": 3,
  "sources": ["../src/updateLocation.ts"],
  "sourcesContent": ["import { EncodedQuery } from './types';\nimport { objectToSearchString } from './objectToSearchString';\nimport { searchStringToObject } from '.';\n\n/**\n * An example of a transformSearchString function that undoes encoding of\n * common JSON characters that are technically allowed in URLs.\n */\nconst JSON_SAFE_CHARS = `{}[],\":`\n  .split('')\n  .map((d) => [d, encodeURIComponent(d)]);\n\nexport function transformSearchStringJsonSafe(searchString: string): string {\n  let str = searchString;\n  for (let [char, code] of JSON_SAFE_CHARS) {\n    str = str.replace(new RegExp('\\\\' + code, 'g'), char);\n  }\n  return str;\n}\n\n/**\n * Update a location, wiping out parameters not included in encodedQuery\n * If a param is set to undefined it will be removed from the URL.\n */\nexport function updateLocation(\n  encodedQuery: EncodedQuery,\n  location: Location,\n  objectToSearchStringFn = objectToSearchString\n): Location {\n  let encodedSearchString = objectToSearchStringFn(encodedQuery);\n\n  const search = encodedSearchString.length ? `?${encodedSearchString}` : '';\n  let href: string;\n  if (location.href) {\n    const url = new URL(location.href);\n    href = `${url.origin}${url.pathname}${search}`;\n  } else {\n    href = search;\n  }\n\n  const newLocation: Location & {\n    key: string;\n    query: EncodedQuery;\n  } = {\n    ...location,\n    key: `${Date.now()}`, // needed for some routers (e.g. react-router)\n    href,\n    search,\n    query: encodedQuery, // needed for some routers (e.g. found)\n  };\n\n  return newLocation;\n}\n\n/**\n * Update a location while retaining existing parameters.\n * If a param is set to undefined it will be removed from the URL.\n */\nexport function updateInLocation(\n  encodedQueryReplacements: EncodedQuery,\n  location: Location,\n  objectToSearchStringFn = objectToSearchString,\n  searchStringToObjectFn = searchStringToObject\n): Location {\n  // explicitly avoid parsing numbers to ensure the\n  // return type has the same shape as EncodeQuery\n  const currQuery = searchStringToObjectFn(location.search);\n\n  const newQuery = {\n    ...currQuery,\n    ...encodedQueryReplacements,\n  };\n\n  return updateLocation(newQuery, location, objectToSearchStringFn);\n}\n"],
  "mappings": "AACA,SAAS,4BAA4B;AACrC,SAAS,4BAA4B;AAMrC,MAAM,kBAAkB,UACrB,MAAM,EAAE,EACR,IAAI,CAAC,MAAM,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC;AAEjC,SAAS,8BAA8B,cAA8B;AAC1E,MAAI,MAAM;AACV,WAAS,CAAC,MAAM,IAAI,KAAK,iBAAiB;AACxC,UAAM,IAAI,QAAQ,IAAI,OAAO,OAAO,MAAM,GAAG,GAAG,IAAI;AAAA,EACtD;AACA,SAAO;AACT;AAMO,SAAS,eACd,cACA,UACA,yBAAyB,sBACf;AACV,MAAI,sBAAsB,uBAAuB,YAAY;AAE7D,QAAM,SAAS,oBAAoB,SAAS,IAAI,wBAAwB;AACxE,MAAI;AACJ,MAAI,SAAS,MAAM;AACjB,UAAM,MAAM,IAAI,IAAI,SAAS,IAAI;AACjC,WAAO,GAAG,IAAI,SAAS,IAAI,WAAW;AAAA,EACxC,OAAO;AACL,WAAO;AAAA,EACT;AAEA,QAAM,cAGF;AAAA,IACF,GAAG;AAAA,IACH,KAAK,GAAG,KAAK,IAAI;AAAA,IACjB;AAAA,IACA;AAAA,IACA,OAAO;AAAA,EACT;AAEA,SAAO;AACT;AAMO,SAAS,iBACd,0BACA,UACA,yBAAyB,sBACzB,yBAAyB,sBACf;AAGV,QAAM,YAAY,uBAAuB,SAAS,MAAM;AAExD,QAAM,WAAW;AAAA,IACf,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AAEA,SAAO,eAAe,UAAU,UAAU,sBAAsB;AAClE;",
  "names": []
}
